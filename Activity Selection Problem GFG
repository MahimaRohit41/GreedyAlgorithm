class Solution
{
    public:
    //Function to find the maximum number of activities that can
    //be performed by a single person.
    static bool compare(const pair<int,int> &a,const pair<int,int> &b)
    {
        return (a.second<b.second);
    }
    int activitySelection(vector<int> start, vector<int> end, int n)
    {
        vector<pair<int,int>> vec;
        for(int i=0;i<n;i++)
        {
         vec.push_back(make_pair(start[i],end[i]));
        }
        sort(vec.begin(),vec.end(),compare);
        int prev = 0;
        int ans = 1;
        for(int curr=1;curr<n;curr++)
        {
            if(vec[prev].second<vec[curr].first)
            {
                ans++;
                prev = curr;
            }
        }
        return ans;
        
    }
};

// { Driver Code Starts.
int main()
{
    int t;
    
    //testcases
    cin >> t;
    while(t--)
    {
        //size of array
        int n;
        cin >> n;
        vector<int> start(n), end(n);
        
        //adding elements to arrays start and end
        for(int i=0;i<n;i++)
            cin>>start[i];
        for(int i=0;i<n;i++)
            cin>>end[i];
        Solution ob;
        //function call
        cout << ob.activitySelection(start, end, n) << endl;
    }
    return 0;
}
  // } Driver Code Ends
